using DataGenerator.Interfaces;
using System;
using System.Json;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

namespace DataGenerator
{
    public class Generator : IDataGenerator
    {
        private readonly IObjectGeneratorService _objectGeneratorService;

        public Generator(IObjectGeneratorService objectGeneratorService)
        {
            _objectGeneratorService = objectGeneratorService;
        }

        public async Task<string> GenerateSQL(string json, CancellationToken cancellationToken)
        {
            try
            {
                var database = await _objectGeneratorService.Convert(json, cancellationToken);

                var script = String.Format("/****** Generated By:  {0}    Script Date: {1} ******/", "Data Generator", DateTime.Now.ToString("g"));

                if (!string.IsNullOrWhiteSpace(database?.name))
                {
                    script += Environment.NewLine;
                    script += string.Format("USE [{0}]{1}", database.name, Environment.NewLine);
                    script += string.Format("GO{0}", Environment.NewLine);
                    script += Environment.NewLine;
                }

                //foreach (var table in database.tables.OrderBy(x => x.DependencyOrder))
                //{

                //}

                return await Task.FromResult(script);

                //return script;
            }
            catch (Exception ex)
            {
                throw new Exception("There was an issues parsing the provided JSON");
            }
        }
    }
}
