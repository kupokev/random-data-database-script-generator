using DataGenerator.Interfaces;
using System;
using System.Threading;
using System.Threading.Tasks;

namespace DataGenerator
{
    public class Generator : IDataGenerator
    {
        private readonly IObjectGeneratorService _objectGeneratorService;
        private readonly IDatabaseGeneratorService _databaseGenerator;
        private readonly IDataGeneratorService _dataGenerator;

        public Generator(IObjectGeneratorService objectGeneratorService, IDatabaseGeneratorService databaseGenerator, IDataGeneratorService dataGenerator)
        {
            _objectGeneratorService = objectGeneratorService;
            _databaseGenerator = databaseGenerator;
            _dataGenerator = dataGenerator;
        }

        public async Task<string> GenerateSQL(string json, CancellationToken cancellationToken)
        {
            try
            {
                var database = await _objectGeneratorService.Convert(json, cancellationToken);

                var script = String.Format("/****** Generated By:  {0}    Script Date: {1} ******/", "Data Generator", DateTime.Now.ToString("g"));

                script += _databaseGenerator.GenerateScript(database);

                script += _dataGenerator.GenerateScript(database);

                return script;
            }
            catch (Exception ex)
            {
                throw new Exception("There was an issues parsing the provided JSON");
            }
        }
    }
}
